<?php
/**
 * AutomatchUrlType
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Price2Spy API
 *
 * Price2Spy REST API Documentation
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AutomatchUrlType Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AutomatchUrlType implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AutomatchUrlType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'added_by_id' => 'int',
        'approved' => 'bool',
        'automatch_url_fields' => '\Swagger\Client\Model\AutomatchUrlFieldsType',
        'automatch_url_id' => 'int',
        'date_added' => 'string',
        'date_approved' => 'string',
        'date_checked' => 'string',
        'date_modified' => 'string',
        'match_accuracy' => 'int',
        'modified_by_id' => 'int',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'added_by_id' => 'int32',
        'approved' => null,
        'automatch_url_fields' => null,
        'automatch_url_id' => 'int32',
        'date_added' => null,
        'date_approved' => null,
        'date_checked' => null,
        'date_modified' => null,
        'match_accuracy' => 'int32',
        'modified_by_id' => 'int32',
        'url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'added_by_id' => 'addedById',
        'approved' => 'approved',
        'automatch_url_fields' => 'automatchUrlFields',
        'automatch_url_id' => 'automatchUrlId',
        'date_added' => 'dateAdded',
        'date_approved' => 'dateApproved',
        'date_checked' => 'dateChecked',
        'date_modified' => 'dateModified',
        'match_accuracy' => 'matchAccuracy',
        'modified_by_id' => 'modifiedById',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'added_by_id' => 'setAddedById',
        'approved' => 'setApproved',
        'automatch_url_fields' => 'setAutomatchUrlFields',
        'automatch_url_id' => 'setAutomatchUrlId',
        'date_added' => 'setDateAdded',
        'date_approved' => 'setDateApproved',
        'date_checked' => 'setDateChecked',
        'date_modified' => 'setDateModified',
        'match_accuracy' => 'setMatchAccuracy',
        'modified_by_id' => 'setModifiedById',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'added_by_id' => 'getAddedById',
        'approved' => 'getApproved',
        'automatch_url_fields' => 'getAutomatchUrlFields',
        'automatch_url_id' => 'getAutomatchUrlId',
        'date_added' => 'getDateAdded',
        'date_approved' => 'getDateApproved',
        'date_checked' => 'getDateChecked',
        'date_modified' => 'getDateModified',
        'match_accuracy' => 'getMatchAccuracy',
        'modified_by_id' => 'getModifiedById',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['added_by_id'] = isset($data['added_by_id']) ? $data['added_by_id'] : null;
        $this->container['approved'] = isset($data['approved']) ? $data['approved'] : null;
        $this->container['automatch_url_fields'] = isset($data['automatch_url_fields']) ? $data['automatch_url_fields'] : null;
        $this->container['automatch_url_id'] = isset($data['automatch_url_id']) ? $data['automatch_url_id'] : null;
        $this->container['date_added'] = isset($data['date_added']) ? $data['date_added'] : null;
        $this->container['date_approved'] = isset($data['date_approved']) ? $data['date_approved'] : null;
        $this->container['date_checked'] = isset($data['date_checked']) ? $data['date_checked'] : null;
        $this->container['date_modified'] = isset($data['date_modified']) ? $data['date_modified'] : null;
        $this->container['match_accuracy'] = isset($data['match_accuracy']) ? $data['match_accuracy'] : null;
        $this->container['modified_by_id'] = isset($data['modified_by_id']) ? $data['modified_by_id'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets added_by_id
     *
     * @return int
     */
    public function getAddedById()
    {
        return $this->container['added_by_id'];
    }

    /**
     * Sets added_by_id
     *
     * @param int $added_by_id added_by_id
     *
     * @return $this
     */
    public function setAddedById($added_by_id)
    {
        $this->container['added_by_id'] = $added_by_id;

        return $this;
    }

    /**
     * Gets approved
     *
     * @return bool
     */
    public function getApproved()
    {
        return $this->container['approved'];
    }

    /**
     * Sets approved
     *
     * @param bool $approved approved
     *
     * @return $this
     */
    public function setApproved($approved)
    {
        $this->container['approved'] = $approved;

        return $this;
    }

    /**
     * Gets automatch_url_fields
     *
     * @return \Swagger\Client\Model\AutomatchUrlFieldsType
     */
    public function getAutomatchUrlFields()
    {
        return $this->container['automatch_url_fields'];
    }

    /**
     * Sets automatch_url_fields
     *
     * @param \Swagger\Client\Model\AutomatchUrlFieldsType $automatch_url_fields automatch_url_fields
     *
     * @return $this
     */
    public function setAutomatchUrlFields($automatch_url_fields)
    {
        $this->container['automatch_url_fields'] = $automatch_url_fields;

        return $this;
    }

    /**
     * Gets automatch_url_id
     *
     * @return int
     */
    public function getAutomatchUrlId()
    {
        return $this->container['automatch_url_id'];
    }

    /**
     * Sets automatch_url_id
     *
     * @param int $automatch_url_id automatch_url_id
     *
     * @return $this
     */
    public function setAutomatchUrlId($automatch_url_id)
    {
        $this->container['automatch_url_id'] = $automatch_url_id;

        return $this;
    }

    /**
     * Gets date_added
     *
     * @return string
     */
    public function getDateAdded()
    {
        return $this->container['date_added'];
    }

    /**
     * Sets date_added
     *
     * @param string $date_added date_added
     *
     * @return $this
     */
    public function setDateAdded($date_added)
    {
        $this->container['date_added'] = $date_added;

        return $this;
    }

    /**
     * Gets date_approved
     *
     * @return string
     */
    public function getDateApproved()
    {
        return $this->container['date_approved'];
    }

    /**
     * Sets date_approved
     *
     * @param string $date_approved date_approved
     *
     * @return $this
     */
    public function setDateApproved($date_approved)
    {
        $this->container['date_approved'] = $date_approved;

        return $this;
    }

    /**
     * Gets date_checked
     *
     * @return string
     */
    public function getDateChecked()
    {
        return $this->container['date_checked'];
    }

    /**
     * Sets date_checked
     *
     * @param string $date_checked date_checked
     *
     * @return $this
     */
    public function setDateChecked($date_checked)
    {
        $this->container['date_checked'] = $date_checked;

        return $this;
    }

    /**
     * Gets date_modified
     *
     * @return string
     */
    public function getDateModified()
    {
        return $this->container['date_modified'];
    }

    /**
     * Sets date_modified
     *
     * @param string $date_modified date_modified
     *
     * @return $this
     */
    public function setDateModified($date_modified)
    {
        $this->container['date_modified'] = $date_modified;

        return $this;
    }

    /**
     * Gets match_accuracy
     *
     * @return int
     */
    public function getMatchAccuracy()
    {
        return $this->container['match_accuracy'];
    }

    /**
     * Sets match_accuracy
     *
     * @param int $match_accuracy match_accuracy
     *
     * @return $this
     */
    public function setMatchAccuracy($match_accuracy)
    {
        $this->container['match_accuracy'] = $match_accuracy;

        return $this;
    }

    /**
     * Gets modified_by_id
     *
     * @return int
     */
    public function getModifiedById()
    {
        return $this->container['modified_by_id'];
    }

    /**
     * Sets modified_by_id
     *
     * @param int $modified_by_id modified_by_id
     *
     * @return $this
     */
    public function setModifiedById($modified_by_id)
    {
        $this->container['modified_by_id'] = $modified_by_id;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


