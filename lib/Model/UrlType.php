<?php
/**
 * UrlType
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Price2Spy API
 *
 * Price2Spy REST API Documentation
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UrlType Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UrlType implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UrlType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'active' => 'bool',
        'added_by_id' => 'int',
        'automatch_url' => '\Swagger\Client\Model\AutomatchUrlType',
        'counter_failed' => 'int',
        'date_added' => 'string',
        'date_modified' => 'string',
        'last_checked' => 'string',
        'last_error' => 'string',
        'last_measurement' => '\Swagger\Client\Model\MeasurementType',
        'modified_by_id' => 'int',
        'product_name' => 'string',
        'second_to_last_measurement' => '\Swagger\Client\Model\MeasurementType',
        'show_in_reports' => 'bool',
        'site_country_iso_code' => 'string',
        'site_human_name' => 'string',
        'url' => 'string',
        'url_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'active' => null,
        'added_by_id' => 'int32',
        'automatch_url' => null,
        'counter_failed' => 'int32',
        'date_added' => null,
        'date_modified' => null,
        'last_checked' => null,
        'last_error' => null,
        'last_measurement' => null,
        'modified_by_id' => 'int32',
        'product_name' => null,
        'second_to_last_measurement' => null,
        'show_in_reports' => null,
        'site_country_iso_code' => null,
        'site_human_name' => null,
        'url' => null,
        'url_id' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active' => 'active',
        'added_by_id' => 'addedById',
        'automatch_url' => 'automatchUrl',
        'counter_failed' => 'counterFailed',
        'date_added' => 'dateAdded',
        'date_modified' => 'dateModified',
        'last_checked' => 'lastChecked',
        'last_error' => 'lastError',
        'last_measurement' => 'lastMeasurement',
        'modified_by_id' => 'modifiedById',
        'product_name' => 'productName',
        'second_to_last_measurement' => 'secondToLastMeasurement',
        'show_in_reports' => 'showInReports',
        'site_country_iso_code' => 'siteCountryISOCode',
        'site_human_name' => 'siteHumanName',
        'url' => 'url',
        'url_id' => 'urlId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active' => 'setActive',
        'added_by_id' => 'setAddedById',
        'automatch_url' => 'setAutomatchUrl',
        'counter_failed' => 'setCounterFailed',
        'date_added' => 'setDateAdded',
        'date_modified' => 'setDateModified',
        'last_checked' => 'setLastChecked',
        'last_error' => 'setLastError',
        'last_measurement' => 'setLastMeasurement',
        'modified_by_id' => 'setModifiedById',
        'product_name' => 'setProductName',
        'second_to_last_measurement' => 'setSecondToLastMeasurement',
        'show_in_reports' => 'setShowInReports',
        'site_country_iso_code' => 'setSiteCountryIsoCode',
        'site_human_name' => 'setSiteHumanName',
        'url' => 'setUrl',
        'url_id' => 'setUrlId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active' => 'getActive',
        'added_by_id' => 'getAddedById',
        'automatch_url' => 'getAutomatchUrl',
        'counter_failed' => 'getCounterFailed',
        'date_added' => 'getDateAdded',
        'date_modified' => 'getDateModified',
        'last_checked' => 'getLastChecked',
        'last_error' => 'getLastError',
        'last_measurement' => 'getLastMeasurement',
        'modified_by_id' => 'getModifiedById',
        'product_name' => 'getProductName',
        'second_to_last_measurement' => 'getSecondToLastMeasurement',
        'show_in_reports' => 'getShowInReports',
        'site_country_iso_code' => 'getSiteCountryIsoCode',
        'site_human_name' => 'getSiteHumanName',
        'url' => 'getUrl',
        'url_id' => 'getUrlId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['added_by_id'] = isset($data['added_by_id']) ? $data['added_by_id'] : null;
        $this->container['automatch_url'] = isset($data['automatch_url']) ? $data['automatch_url'] : null;
        $this->container['counter_failed'] = isset($data['counter_failed']) ? $data['counter_failed'] : null;
        $this->container['date_added'] = isset($data['date_added']) ? $data['date_added'] : null;
        $this->container['date_modified'] = isset($data['date_modified']) ? $data['date_modified'] : null;
        $this->container['last_checked'] = isset($data['last_checked']) ? $data['last_checked'] : null;
        $this->container['last_error'] = isset($data['last_error']) ? $data['last_error'] : null;
        $this->container['last_measurement'] = isset($data['last_measurement']) ? $data['last_measurement'] : null;
        $this->container['modified_by_id'] = isset($data['modified_by_id']) ? $data['modified_by_id'] : null;
        $this->container['product_name'] = isset($data['product_name']) ? $data['product_name'] : null;
        $this->container['second_to_last_measurement'] = isset($data['second_to_last_measurement']) ? $data['second_to_last_measurement'] : null;
        $this->container['show_in_reports'] = isset($data['show_in_reports']) ? $data['show_in_reports'] : null;
        $this->container['site_country_iso_code'] = isset($data['site_country_iso_code']) ? $data['site_country_iso_code'] : null;
        $this->container['site_human_name'] = isset($data['site_human_name']) ? $data['site_human_name'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['url_id'] = isset($data['url_id']) ? $data['url_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets added_by_id
     *
     * @return int
     */
    public function getAddedById()
    {
        return $this->container['added_by_id'];
    }

    /**
     * Sets added_by_id
     *
     * @param int $added_by_id added_by_id
     *
     * @return $this
     */
    public function setAddedById($added_by_id)
    {
        $this->container['added_by_id'] = $added_by_id;

        return $this;
    }

    /**
     * Gets automatch_url
     *
     * @return \Swagger\Client\Model\AutomatchUrlType
     */
    public function getAutomatchUrl()
    {
        return $this->container['automatch_url'];
    }

    /**
     * Sets automatch_url
     *
     * @param \Swagger\Client\Model\AutomatchUrlType $automatch_url automatch_url
     *
     * @return $this
     */
    public function setAutomatchUrl($automatch_url)
    {
        $this->container['automatch_url'] = $automatch_url;

        return $this;
    }

    /**
     * Gets counter_failed
     *
     * @return int
     */
    public function getCounterFailed()
    {
        return $this->container['counter_failed'];
    }

    /**
     * Sets counter_failed
     *
     * @param int $counter_failed counter_failed
     *
     * @return $this
     */
    public function setCounterFailed($counter_failed)
    {
        $this->container['counter_failed'] = $counter_failed;

        return $this;
    }

    /**
     * Gets date_added
     *
     * @return string
     */
    public function getDateAdded()
    {
        return $this->container['date_added'];
    }

    /**
     * Sets date_added
     *
     * @param string $date_added date_added
     *
     * @return $this
     */
    public function setDateAdded($date_added)
    {
        $this->container['date_added'] = $date_added;

        return $this;
    }

    /**
     * Gets date_modified
     *
     * @return string
     */
    public function getDateModified()
    {
        return $this->container['date_modified'];
    }

    /**
     * Sets date_modified
     *
     * @param string $date_modified date_modified
     *
     * @return $this
     */
    public function setDateModified($date_modified)
    {
        $this->container['date_modified'] = $date_modified;

        return $this;
    }

    /**
     * Gets last_checked
     *
     * @return string
     */
    public function getLastChecked()
    {
        return $this->container['last_checked'];
    }

    /**
     * Sets last_checked
     *
     * @param string $last_checked last_checked
     *
     * @return $this
     */
    public function setLastChecked($last_checked)
    {
        $this->container['last_checked'] = $last_checked;

        return $this;
    }

    /**
     * Gets last_error
     *
     * @return string
     */
    public function getLastError()
    {
        return $this->container['last_error'];
    }

    /**
     * Sets last_error
     *
     * @param string $last_error last_error
     *
     * @return $this
     */
    public function setLastError($last_error)
    {
        $this->container['last_error'] = $last_error;

        return $this;
    }

    /**
     * Gets last_measurement
     *
     * @return \Swagger\Client\Model\MeasurementType
     */
    public function getLastMeasurement()
    {
        return $this->container['last_measurement'];
    }

    /**
     * Sets last_measurement
     *
     * @param \Swagger\Client\Model\MeasurementType $last_measurement last_measurement
     *
     * @return $this
     */
    public function setLastMeasurement($last_measurement)
    {
        $this->container['last_measurement'] = $last_measurement;

        return $this;
    }

    /**
     * Gets modified_by_id
     *
     * @return int
     */
    public function getModifiedById()
    {
        return $this->container['modified_by_id'];
    }

    /**
     * Sets modified_by_id
     *
     * @param int $modified_by_id modified_by_id
     *
     * @return $this
     */
    public function setModifiedById($modified_by_id)
    {
        $this->container['modified_by_id'] = $modified_by_id;

        return $this;
    }

    /**
     * Gets product_name
     *
     * @return string
     */
    public function getProductName()
    {
        return $this->container['product_name'];
    }

    /**
     * Sets product_name
     *
     * @param string $product_name product_name
     *
     * @return $this
     */
    public function setProductName($product_name)
    {
        $this->container['product_name'] = $product_name;

        return $this;
    }

    /**
     * Gets second_to_last_measurement
     *
     * @return \Swagger\Client\Model\MeasurementType
     */
    public function getSecondToLastMeasurement()
    {
        return $this->container['second_to_last_measurement'];
    }

    /**
     * Sets second_to_last_measurement
     *
     * @param \Swagger\Client\Model\MeasurementType $second_to_last_measurement second_to_last_measurement
     *
     * @return $this
     */
    public function setSecondToLastMeasurement($second_to_last_measurement)
    {
        $this->container['second_to_last_measurement'] = $second_to_last_measurement;

        return $this;
    }

    /**
     * Gets show_in_reports
     *
     * @return bool
     */
    public function getShowInReports()
    {
        return $this->container['show_in_reports'];
    }

    /**
     * Sets show_in_reports
     *
     * @param bool $show_in_reports show_in_reports
     *
     * @return $this
     */
    public function setShowInReports($show_in_reports)
    {
        $this->container['show_in_reports'] = $show_in_reports;

        return $this;
    }

    /**
     * Gets site_country_iso_code
     *
     * @return string
     */
    public function getSiteCountryIsoCode()
    {
        return $this->container['site_country_iso_code'];
    }

    /**
     * Sets site_country_iso_code
     *
     * @param string $site_country_iso_code site_country_iso_code
     *
     * @return $this
     */
    public function setSiteCountryIsoCode($site_country_iso_code)
    {
        $this->container['site_country_iso_code'] = $site_country_iso_code;

        return $this;
    }

    /**
     * Gets site_human_name
     *
     * @return string
     */
    public function getSiteHumanName()
    {
        return $this->container['site_human_name'];
    }

    /**
     * Sets site_human_name
     *
     * @param string $site_human_name site_human_name
     *
     * @return $this
     */
    public function setSiteHumanName($site_human_name)
    {
        $this->container['site_human_name'] = $site_human_name;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets url_id
     *
     * @return int
     */
    public function getUrlId()
    {
        return $this->container['url_id'];
    }

    /**
     * Sets url_id
     *
     * @param int $url_id url_id
     *
     * @return $this
     */
    public function setUrlId($url_id)
    {
        $this->container['url_id'] = $url_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


